version: "3"
services:
  nginx:
    image: nginx
    container_name: app-nginx-container #自定义容器的名称
    #挂载点
    volumes:
      - ./nginx/html:/usr/share/nginx/html #nginx web目录
      - ./nginx/conf/cert:/etc/nginx/cert # https配置文件目录
      # - ./nodeJS/static:/code/static
      - ./nginx/conf/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
      - "443:443"
    #docker 重启后，容器自启动
    restart: always
    networks:
      - app-network
  # mysql:
  #   image: mysql:5.7
  #   container_name: app-mysql-container #自定义容器的名称
  #   volumes: #挂载当前的data目录到容器默认mysql存储目录
  #     - ./mysql/db:/var/lib/mysql
  #     - ./mysql/mysqld:/var/run/mysqld

  #   environment: #环境变量
  #     - MYSQL_ROOT_PASSWORD=123456 #mysql的root密码
  #     - MYSQL_DATABASE=app_docker #mysql的初始化数据库
  #   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
  #   ports:
  #     - "3306:3306"
  #   #docker 重启后，容器自启动
  #   restart: always
  #   networks:
  #     - app-network

  # server:
  #   depends_on:
  #     - mysql
  #     - nginx
  #   container_name: app-server-container #自定义容器的名称
  #   build:
  #     context: ./server
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   restart: always
  #   # restart: on-failure # 设置自动重启，这一步必须设置，主要是存在mysql还没有启动完成就启动了node服务
  #   networks:
  #     - app-network
  # web:
  #   image: node #node镜像名称
  #   working_dir: /code #工作目录
  #   container_name: my-web-container #自定义容器的名称
  #   volumes:
  #     - ./nodeJS:/code #把本地nodejs目录挂载到容器的工作目录（/code）
  #     - ./mysql/mysqld:/code/mysqld #MySQL需要套接字（mysqld.sock）文件
  #   ports:
  #     - "4000:3000"
  #   depends_on: #依赖关系
  #     - mysql
  #     - nginx
  #   command: npm start
  #   restart: always
  #   networks:
  #     - app-network
networks:
  app-network:
    driver: bridge
